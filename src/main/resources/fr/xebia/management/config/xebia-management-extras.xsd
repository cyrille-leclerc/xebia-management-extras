<?xml version="1.0" encoding="UTF-8"?>
<!-- -->
<!-- Copyright 2008-2010 Xebia and the original author or authors. -->
<!-- -->
<!-- Licensed under the Apache License, Version 2.0 (the "License"); -->
<!-- you may not use this file except in compliance with the License. -->
<!-- You may obtain a copy of the License at -->
<!-- -->
<!-- http://www.apache.org/licenses/LICENSE-2.0 -->
<!-- -->
<!-- Unless required by applicable law or agreed to in writing, software -->
<!-- distributed under the License is distributed on an "AS IS" BASIS, -->
<!-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. -->
<!-- See the License for the specific language governing permissions and -->
<!-- limitations under the License. -->
<!-- -->
<xsd:schema xmlns="http://www.xebia.fr/schema/xebia-management-extras" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:beans="http://www.springframework.org/schema/beans"
   xmlns:tool="http://www.springframework.org/schema/tool" targetNamespace="http://www.xebia.fr/schema/xebia-management-extras"
   elementFormDefault="qualified" attributeFormDefault="unqualified">

   <xsd:import namespace="http://www.springframework.org/schema/beans" schemaLocation="http://www.springframework.org/schema/beans/spring-beans-3.0.xsd" />
   <xsd:import namespace="http://www.springframework.org/schema/tool" schemaLocation="http://www.springframework.org/schema/tool/spring-tool-3.0.xsd" />

   <xsd:annotation>
      <xsd:documentation><![CDATA[
   Defines the configuration elements for the Xebia Management extras
   context support.
      ]]></xsd:documentation>
   </xsd:annotation>

   <xsd:element name="servlet-context-aware-mbean-server">
      <xsd:annotation>
         <xsd:documentation source="java:fr.xebia.management.ServletContextAwareMBeanServerFactory">
         <![CDATA[
   Exposes a default MBeanServer for the current platform.
   Autodetects WebLogic 9+, WebSphere 5.1+ and the JDK 1.5+ platform MBeanServer.

   The default bean name for the exposed MBeanServer is "mbeanServer".
   This may be customized through specifying the "id" attribute.
         ]]></xsd:documentation>
         <xsd:appinfo>
            <tool:annotation>
               <tool:exports type="javax.management.MBeanServer" />
            </tool:annotation>
         </xsd:appinfo>
      </xsd:annotation>
      <xsd:complexType>
         <xsd:complexContent>
            <xsd:extension base="beans:identifiedType">
               <xsd:attribute name="server" type="xsd:string">
                  <xsd:annotation>
                     <xsd:documentation><![CDATA[
   The bean name of the MBeanServer to which MBeans should be exported.
   Default is to use the platform's default MBeanServer (autodetecting
   WebLogic 9+, WebSphere 5.1+ and the JDK 1.5+ platform MBeanServer).
               ]]></xsd:documentation>
                     <xsd:appinfo>
                        <tool:annotation kind="ref">
                           <tool:expected-type type="javax.management.MBeanServer" />
                        </tool:annotation>
                     </xsd:appinfo>
                  </xsd:annotation>
               </xsd:attribute>

            </xsd:extension>
         </xsd:complexContent>
      </xsd:complexType>
   </xsd:element>

   <xsd:element name="profile-aspect">
      <xsd:annotation>
         <xsd:documentation source="java:fr.xebia.management.statistics.ProfileAspect">
         <![CDATA[
   Exposes a default ProfileAspect to annotate methods with @Profiled.

   The default bean name for the exposed ProfileAspect is "profileAspect".
   This may be customized through specifying the "id" attribute.
         ]]></xsd:documentation>
         <xsd:appinfo>
            <tool:annotation>
               <tool:exports type="fr.xebia.management.statistics.ProfileAspect" />
            </tool:annotation>
         </xsd:appinfo>
      </xsd:annotation>
      <xsd:complexType>
         <xsd:complexContent>
            <xsd:extension base="beans:identifiedType">
               <xsd:attribute name="server" type="xsd:string">
                  <xsd:annotation>
                     <xsd:documentation><![CDATA[
   The bean name of the MBeanServer to which MBeans should be exported.
   Default is to use the platform's default MBeanServer (autodetecting
   WebLogic 9+, WebSphere 5.1+ and the JDK 1.5+ platform MBeanServer).
               ]]></xsd:documentation>
                     <xsd:appinfo>
                        <tool:annotation kind="ref">
                           <tool:expected-type type="javax.management.MBeanServer" />
                        </tool:annotation>
                     </xsd:appinfo>
                  </xsd:annotation>
               </xsd:attribute>

               <xsd:attribute name="jmxDomain" type="xsd:string" default="fr.xebia">
                  <xsd:annotation>
                     <xsd:documentation><![CDATA[
   Name of the domain of the JMX MBeans registered by the profile aspect. 
   Registered MBeans are :
   * the MBean of the profile aspect itself 
   * one mbean per monitored service 
               ]]></xsd:documentation>
                  </xsd:annotation>
               </xsd:attribute>

               <xsd:attribute name="classNameStyle" default="COMPACT_FULLY_QUALIFIED_NAME">
                  <xsd:annotation>
                     <xsd:documentation><![CDATA[
   Name of the service statistics for the when "name" attribute is not 
   defined using the @Profiled annotation.
   Values are :
   * FULLY_QUALIFIED_NAME : e.g. java.lang.String
   * COMPACT_FULLY_QUALIFIED_NAME : e.g. j.l.String
   * SHORT_NAME : e.g. String
               ]]></xsd:documentation>
                  </xsd:annotation>
                  <xsd:simpleType>
                     <xsd:restriction base="xsd:string">
                        <xsd:enumeration value="FULLY_QUALIFIED_NAME" />
                        <xsd:enumeration value="COMPACT_FULLY_QUALIFIED_NAME" />
                        <xsd:enumeration value="SHORT_NAME" />
                     </xsd:restriction>
                  </xsd:simpleType>
               </xsd:attribute>

            </xsd:extension>
         </xsd:complexContent>
      </xsd:complexType>
   </xsd:element>

   <xsd:element name="application-version-mbean">
      <xsd:annotation>
         <xsd:documentation source="java:fr.xebia.management.maven.WebApplicationMavenInformation">
         <![CDATA[
   Exposes a WebApplicationMavenInformation bean which is registered as a JMX MBean to expose the version number version via JMX.
   
   Relies on the existence of a META-INF/maven/.../my-app.pom file.

   The default bean name for the exposed WebApplicationMavenInformation is "webApplicationMavenInformation".
   This may be customized through specifying the "id" attribute.
         ]]></xsd:documentation>
         <xsd:appinfo>
            <tool:annotation>
               <tool:exports type="fr.xebia.management.maven.WebApplicationMavenInformation" />
            </tool:annotation>
         </xsd:appinfo>
      </xsd:annotation>
      <xsd:complexType>
         <xsd:complexContent>
            <xsd:extension base="beans:identifiedType">
               <xsd:attribute name="jmxDomain" type="xsd:string" default="fr.xebia">
                  <xsd:annotation>
                     <xsd:documentation><![CDATA[
   Name of the domain of the registered WebApplicationMavenInformation JMX MBean.
               ]]></xsd:documentation>
                  </xsd:annotation>
               </xsd:attribute>
            </xsd:extension>
         </xsd:complexContent>
      </xsd:complexType>
   </xsd:element>

   <xsd:element name="jms-connection-factory-wrapper">
      <xsd:annotation>
         <xsd:documentation source="java:fr.xebia.management.jms.SpringManagedConnectionFactory">
         <![CDATA[
   Wraps a JMS ConnectionFactory to expose various metrics on an mbean named <code>javax.jms:type=ConnectionFactory,name=${bean-id}</code>
   Where <code>${bean-id} is the id of this element.</code>
         ]]></xsd:documentation>
         <xsd:appinfo>
            <tool:annotation>
               <tool:exports type="javax.jms.ConnectionFactory" />
            </tool:annotation>
         </xsd:appinfo>
      </xsd:annotation>
      <xsd:complexType>
         <xsd:complexContent>
            <xsd:extension base="beans:identifiedType">
               <xsd:attribute name="connection-factory" type="xsd:string" use="required">
                  <xsd:annotation>
                     <xsd:documentation><![CDATA[
   Reference of the wrapped JMS ConnectionFactory
               ]]></xsd:documentation>
                     <xsd:appinfo>
                        <tool:annotation kind="ref">
                           <tool:expected-type type="javax.jms.ConnectionFactory" />
                        </tool:annotation>
                     </xsd:appinfo>
                  </xsd:annotation>
               </xsd:attribute>
            </xsd:extension>
         </xsd:complexContent>
      </xsd:complexType>
   </xsd:element>

   <xsd:element name="jms-caching-connection-factory">
      <xsd:annotation>
         <xsd:documentation source="java:fr.xebia.springframework.jms.ManagedCachingConnectionFactory">
         <![CDATA[
   Caching wrapper of a JMS ConnectionFactory. 
   This wrapper is automatically exposed by Spring as a MBean named <code>javax.jms:type=CachingConnectionFactory,name=${bean-id}</code>
         ]]></xsd:documentation>
         <xsd:appinfo>
            <tool:annotation>
               <tool:exports type="javax.jms.ConnectionFactory" />
            </tool:annotation>
         </xsd:appinfo>
      </xsd:annotation>
      <xsd:complexType>
         <xsd:complexContent>
            <xsd:extension base="beans:identifiedType">
               <xsd:attribute name="connection-factory" type="xsd:string" use="required">
                  <xsd:annotation>
                     <xsd:documentation><![CDATA[
   Reference of the wrapped JMS ConnectionFactory
               ]]></xsd:documentation>
                     <xsd:appinfo>
                        <tool:annotation kind="ref">
                           <tool:expected-type type="javax.jms.ConnectionFactory" />
                        </tool:annotation>
                     </xsd:appinfo>
                  </xsd:annotation>
               </xsd:attribute>

               <xsd:attribute name="cache-consumers" type="xsd:boolean" default="true">
                  <xsd:annotation>
                     <xsd:documentation><![CDATA[
   Indicates weither MessageConsumers should be cached
               ]]></xsd:documentation>
                  </xsd:annotation>
               </xsd:attribute>
               <xsd:attribute name="cache-producers" type="xsd:boolean" default="true">
                  <xsd:annotation>
                     <xsd:documentation><![CDATA[
   Indicates weither MessageProducers should be cached
               ]]></xsd:documentation>
                  </xsd:annotation>
               </xsd:attribute>
               <xsd:attribute name="reconnect-on-exception" type="xsd:boolean" default="true">
                  <xsd:annotation>
                     <xsd:documentation><![CDATA[
   Indicates weither a connection should be closed and reopened when a JMSException occurs
               ]]></xsd:documentation>
                  </xsd:annotation>
               </xsd:attribute>
               <xsd:attribute name="session-cache-size" type="xsd:int" default="1">
                  <xsd:annotation>
                     <xsd:documentation><![CDATA[
   Number of active JMS sessions. Default value is 1. Consider increasing this number in highly concurrent environments. 
               ]]></xsd:documentation>
                  </xsd:annotation>
               </xsd:attribute>

            </xsd:extension>
         </xsd:complexContent>
      </xsd:complexType>
   </xsd:element>

   <xsd:element name="eh-cache-management-service">
      <xsd:annotation>
         <xsd:documentation source="java:net.sf.ehcache.management.ManagementService">
         <![CDATA[
   Wraps a JMS ConnectionFactory to expose various metrics on an mbean named <code>javax.jms:type=ConnectionFactory,name=${bean-id}</code>
   Where <code>${bean-id} is the id of this element.</code>
         ]]></xsd:documentation>
         <xsd:appinfo>
            <tool:annotation>
               <tool:exports type="net.sf.ehcache.management.ManagementService" />
            </tool:annotation>
         </xsd:appinfo>
      </xsd:annotation>
      <xsd:complexType>
         <xsd:complexContent>
            <xsd:extension base="beans:identifiedType">
               <xsd:attribute name="mbean-server" type="xsd:string" use="required">
                  <xsd:annotation>
                     <xsd:documentation><![CDATA[
   Reference to the MBean Server
               ]]></xsd:documentation>
                     <xsd:appinfo>
                        <tool:annotation kind="ref">
                           <tool:expected-type type="javax.management.MBeanServer" />
                        </tool:annotation>
                     </xsd:appinfo>
                  </xsd:annotation>
               </xsd:attribute>
               <xsd:attribute name="cache-manager" type="xsd:string" use="required">
                  <xsd:annotation>
                     <xsd:documentation><![CDATA[
   Reference to the Cache Manager
               ]]></xsd:documentation>
                     <xsd:appinfo>
                        <tool:annotation kind="ref">
                           <tool:expected-type type="net.sf.ehcache.CacheManager" />
                        </tool:annotation>
                     </xsd:appinfo>
                  </xsd:annotation>
               </xsd:attribute>

               <xsd:attribute name="register-cache-manager" type="xsd:boolean" default="true">
                  <xsd:annotation>
                     <xsd:documentation><![CDATA[
   Indicates weither CacheManager MBean should be registered
               ]]></xsd:documentation>
                  </xsd:annotation>
               </xsd:attribute>
               <xsd:attribute name="register-caches" type="xsd:boolean" default="true">
                  <xsd:annotation>
                     <xsd:documentation><![CDATA[
   Indicates weither Caches MBeans should be registered
               ]]></xsd:documentation>
                  </xsd:annotation>
               </xsd:attribute>
               <xsd:attribute name="register-cache-configurations" type="xsd:boolean" default="true">
                  <xsd:annotation>
                     <xsd:documentation><![CDATA[
   Indicates weither Cache Configurations MBeans should be registered
               ]]></xsd:documentation>
                  </xsd:annotation>
               </xsd:attribute>
               <xsd:attribute name="register-cache-statistics" type="xsd:boolean" default="true">
                  <xsd:annotation>
                     <xsd:documentation><![CDATA[
   Indicates weither Cache Statistics MBeans should be registered
               ]]></xsd:documentation>
                  </xsd:annotation>
               </xsd:attribute>

            </xsd:extension>
         </xsd:complexContent>
      </xsd:complexType>
   </xsd:element>
   
   <xsd:element name="executor-service">
        <xsd:annotation>
            <xsd:documentation><![CDATA[
    Defines a ExecutorService instance with configurable pool size,
    queue-capacity, keep-alive, and rejection-policy values.
            ]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:attribute name="id" type="xsd:string" use="required">
                <xsd:annotation>
                    <xsd:documentation><![CDATA[
    The bean name for the generated ExecutorService instance.
    This value will also be used as the thread name prefix which is why it is
    required even when defining the executor as an inner bean: The executor
    won't be directly accessible then but will nevertheless use the specified
    id as the thread name prefix of the threads that it manages.
                    ]]></xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="pool-size" type="xsd:string" use="optional">
                <xsd:annotation>
                    <xsd:documentation><![CDATA[
    The size of the executor's thread pool as either a single value or a range
    (e.g. 5-10). If no bounded queue-capacity value is provided, then a max value
    has no effect unless the range is specified as 0-n. In that case, the core pool
    will have a size of n, but the 'allowCoreThreadTimeout' flag will be set to true.
    If a queue-capacity is provided, then the lower bound of a range will map to the
    core size and the upper bound will map to the max size. If this attribute is not
    provided, the default core size will be 1, and the default max size will be
    Integer.MAX_VALUE (i.e. unbounded).
                    ]]></xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="queue-capacity" type="xsd:int" use="optional">
                <xsd:annotation>
                    <xsd:documentation><![CDATA[
    Queue capacity for the ThreadPoolTaskExecutor. If not specified, the default will
    be Integer.MAX_VALUE (i.e. unbounded).
                    ]]></xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="keep-alive" type="xsd:int" use="optional">
                <xsd:annotation>
                    <xsd:documentation><![CDATA[
    Keep-alive time in seconds. Inactive threads that have been created beyond the
    core size will timeout after the specified number of seconds elapse. If the
    executor has an unbounded queue capacity and a size range represented as 0-n,
    then the core threads will also be configured to timeout when inactive.
    Otherwise, core threads will not ever timeout.
                    ]]></xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="rejection-policy" use="optional" default="ABORT">
                <xsd:annotation>
                    <xsd:documentation><![CDATA[
    The RejectedExecutionHandler type. When a bounded queue cannot accept any
    additional tasks, this determines the behavior. While the default is ABORT,
    consider using CALLER_RUNS to throttle inbound tasks. In other words, by forcing
    the caller to run the task itself, it will not be able to provide another task
    until after it completes the task at hand. In the meantime, one or more tasks
    may be removed from the queue. Alternatively, if it is not critical to run every
    task, consider using DISCARD to drop the current task or DISCARD_OLDEST to drop
    the task at the head of the queue.
                    ]]></xsd:documentation>
                </xsd:annotation>
                <xsd:simpleType>
                    <xsd:restriction base="xsd:string">
                        <xsd:enumeration value="ABORT"/>
                        <xsd:enumeration value="CALLER_RUNS"/>
                        <xsd:enumeration value="DISCARD"/>
                        <xsd:enumeration value="DISCARD_OLDEST"/>
                    </xsd:restriction>
                </xsd:simpleType>
            </xsd:attribute>
        </xsd:complexType>
    </xsd:element>
</xsd:schema>
